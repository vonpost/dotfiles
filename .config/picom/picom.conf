
rules = (
  { match = "class_g = 'qutebrowser' || class_g = 'Rofi' || class_g = 'Dunst'";
    opacity = 1.0; },

  { match = "class_g = 'Dunst'";
    opacity = 1.0; corner-radius=0; },

  { match = "(class_g = 'Emacs' || class_g = 'Alacritty') && focused";
    opacity = 1.; opacity-override = true; },

  { match = "(class_g = 'Emacs' || class_g = 'Alacritty') && !focused";
    opacity = 1.; opacity-override = true; }, #shader = "/home/dcol/.config/picom/shaders/grayscale.glsl"; },
{
    match = "fullscreen";
    corner-radius = 0;
},
{
  match = "override_redirect=true";
  shadow=false;
  animations = (
    {
        triggers = [ "open", "show" ];
        duration = 0;
    },
    {
        triggers = [ "close", "hide" ];
        duration = 0;
    }
  );
},

# {
#     match = "class_g = xmonad-window-hint";
#     shadows=false;
#     animations = (
#     {
#         triggers = [ "open", "show" ];
#         duration = 0;
#     }
# )
# },



  #{ match = "(class_g = 'Emacs' || class_g = 'Alacritty')"; shader = "/home/dcol/.config/picom/shaders/paper_grain.frag"; }

)

use-damage = true;
unredir-if-possible = false;
backend = "glx";
vsync = true;
glx-use-copysubbuffer-mesa = true;
# glx-copy-from-front = true;
# glx-swap-method = 2;
xrender-sync = true;
xrender-sync-fence = true;

# corners
rounded-corners = true;
corner-radius = 0;

detect-rounded-corners = true;
blur-background-exclude = [
  "class_g = 'Dunst'"
  "override_redirect=true"
]

# Blur
blur-method = "dual_kawase";
blur-size = 3;
blur-strength = 3;
blur-background = true;
blur-background-frame = false;
blur-kern = "3x3box";

# Enable shadows
shadow = true;
shadow-radius = 7;
shadow-offset-x = 12;
shadow-offset-y = 12;
shadow-opacity = .6;
shadow-color = "#000000";

# Fading
fading = true;
fade-in-step = 0.05;  # Slightly slower, for a smoother fade-in
fade-out-step = 0.05;  # Slightly slower fade-out as well, for consistency
fade-delta = 10;  # Remains the same, fine-tunes the fade delta
fade-time = 300;  # Increase fade-time to 300ms for a more gradual fade-in
fade-duration = 400;  # Slightly longer fade-duration for a smoother transition
no-fading-openclose = true;  # Keep this to prevent fade during open/close transitions
no-fading-destroyed-argb = true;  # No fading for destroyed ARGB windows


# Animations
animations = (
    {
        triggers = ["close", "hide"];
        opacity = {
            curve = "linear";
            duration = 0.4;  # Slightly longer duration for smoother opacity fade
            start = "window-raw-opacity-before";
            end = 0;
        };
        shadow-opacity = "opacity";
        scale-x = {
            curve = "cubic-bezier(0.25,0.8,0.25,1)";  # Smooth easing curve
            duration = 0.6;  # Smoother zoom-out
            start = 1;  # Start at full size
            end = 0;  # Zoom out to 0
        };
        scale-y = "scale-x";
        shadow-scale-x = "scale-x";
        shadow-scale-y = "scale-y";

        # Adjust offsets to zoom from the center
        offset-x = "(1 - scale-x) / 2 * window-width";
        offset-y = "(1 - scale-y) / 2 * window-height";
        shadow-offset-x = "offset-x";
        shadow-offset-y = "offset-y";

        # Add blur effect during close
        blur = {
            curve = "linear";
            duration = 0.6;  # Smooth blur fade
            start = 0;
            end = 10;  # Max blur (you can adjust this value for stronger/weaker blur)
        };
    },
    {
        triggers = ["open", "show"];
        opacity = {
            curve = "cubic-bezier(0.25,0.8,0.25,1)";  # Smooth easing curve
            duration = 0.2;  # Smoother fade-in with longer duration
            start = 0;
            end = "window-raw-opacity";
        };
        offset-x = "(1 - scale-x) / 2 * window-width";  # Start from center
        offset-y = "(1 - scale-y) / 2 * window-height";  # Start from center
        scale-x = {
            curve = "cubic-bezier(0.25,0.8,0.25,1)";  # Smooth easing curve
            duration = 0.8;  # Slower zoom-in for smooth effect
            start = 0;  # Start very small
            end = 1;  # Zoom in to full size
        };
        scale-y = "scale-x";
        shadow-scale-x = "scale-x";
        shadow-scale-y = "scale-y";
        shadow-offset-x = "offset-x";
        shadow-offset-y = "offset-y";
    },
    {
        triggers = ["geometry"];
        scale-x = {
            curve = "cubic-bezier(0.25,0.8,0.25,1)";  # Smooth easing curve
            duration = 0.5;  # Smoother scaling
            start = "window-width-before / window-width";
            end = 1;
        };
        scale-y = {
            curve = "cubic-bezier(0.25,0.8,0.25,1)";  # Smooth easing curve
            duration = 0.5;  # Smoother scaling
            start = "window-height-before / window-height";
            end = 1;
        };
        offset-x = {
            curve = "cubic-bezier(0.25,0.8,0.25,1)";  # Smooth easing curve
            duration = 0.3;  # Smoother positioning
            start = "window-x-before - window-x";
            end = 0;
        };
        offset-y = {
            curve = "cubic-bezier(0.25,0.8,0.25,1)";  # Smooth easing curve
            duration = 0.3;  # Smoother positioning
            start = "window-y-before - window-y";
            end = 0;
        };
        shadow-scale-x = "scale-x";
        shadow-scale-y = "scale-y";
        shadow-offset-x = "offset-x";
        shadow-offset-y = "offset-y";
    }
)
